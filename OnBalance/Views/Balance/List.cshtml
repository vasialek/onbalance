@model IEnumerable<OnBalance.Models.BalanceItem>

<table border="0" cellspacing="0">
    <tr>
        <th>
            Status
        </th>
        <th>
            POS Id
        </th>
        <th>
            Internal code
        </th>
        <th>
            Product name
        </th>
        <th>
            Quantity
        </th>
        <th>
            Price
        </th>
        <th>
            Price of release
        </th>
        <th>Actions</th>
    </tr>

@if(Model.Count() > 0)
{
    foreach(var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.StatusName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PosId)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.InternalCode)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ProductName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Quantity)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PriceOfRelease)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item._DbFieldIsNew)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.IsNew)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HasLocalChanges)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.HasRemoteChanges)
            </td>
            <td>
                @if(item.Status == OnBalance.Status.Approved)
                {
                    @Html.ActionLink("Confirm", "confirm", new { id = item.Id });
                }
            </td>
        </tr>
    }
} else
{
    <tr>
        <td colspan="8">
            No pending changes from this POS
        </td>
    </tr>
}
</table>

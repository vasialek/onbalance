@model OnBalance.ViewModels.Products.ProductsByCategoryViewModel

@{
    ViewBag.Title = "Balance";
}
    <style>
        .product-qnt {
            width: 25px; float: left; overflow: hidden; font-size: x-small;
        }
        .product-qnt-minus {
            width: 8px; float: left; cursor: pointer;
        }
        .product-qnt-plus {
            width: 8px; float: left; cursor: pointer;
        }
    </style>

<h2>Balance</h2>

@Html.ActionLink("Pending changes", "list", "balance", new { id = Model.PosId }, new { @class = "btn btn-mini btn-primary", target = "_blank" })

@foreach (var c in Model.ProductsByCategories)
{
    <table class="table table-bordered table-condensed table-striped">
        <tr>
            <th>
                Name
            </th>
            <th>
                Code
            </th>
            <th>
                Quantity
            </th>
            <th>
                Price
            </th>
            <th>
                Price (release)
            </th>
            @foreach (var s in c.SizesOrdered)
            {
                <th>@s.SizeName</th>
            }
        </tr>
        <tbody id="ProCat_@(c.CategoryId)">
            <tr>
                <td colspan="@(c.SizesOrdered.Count() + 4)">
                    <a href="#" class="btn btn-mini btn-primary product-add-new" data-category-id="@c.CategoryId" data-size-qnt="@c.SizesOrdered.Length"><i class="icon-plus"></i></a>
                </td>
            </tr>
        @foreach (var item in c.Products)
	    {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.InternalCode)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.QuantityCalculated)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PriceFirst)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PriceReleaseFirst)
                </td>
                @*@foreach (var s in c.SizesOrdered)*@
                @for (int i = 0; i < c.SizesOrdered.Length; i++)
                {
                    if (item.ProductDetails != null)
                    {
                        var qnt = item.ProductDetails.FirstOrDefault(x => x.parameter_value == c.SizesOrdered[i].SizeName);
                        if (qnt != null)
                        {
                        <td id="@("Pr_" + qnt.id)">
                            <div id="@("Qnt_" + qnt.id)" class="product-qnt">@qnt.quantity</div>
                            <div id="@("Decrease_" + qnt.id)" class="product-qnt-minus">@Html.Image("/images/decrease.gif", 6, 3, "-", null)</div>
                            <div id="@("Increase_" + qnt.id)" class="product-qnt-plus">@Html.Image("/images/increase.gif", 6, 3, "+", null)</div>
                        </td>
                        }
                        else
                        {
                            <td id="@string.Concat("NewS_", item.Id, "_", i)">
                                <div data-product-id="@item.Id" data-size-name="@c.SizesOrdered[i].SizeName" class="product-new-size" style="font-size: x-small">Add</div>
                            </td>
                        }
                    }
                    else
                    {
                        <td>-</td>
                    }
                }
            </tr>
            
	    }
        </tbody>
    </table>
}

<div id="DialogDiv" style="display: none;">
    @Html.LoaderDiv()
    <div id="DynamicDiv"></div>
</div>

<link rel="stylesheet" href="//code.jquery.com/ui/1.11.0/themes/smoothness/jquery-ui.css">
<script src="//code.jquery.com/jquery-1.10.2.js"></script>
<script src="//code.jquery.com/ui/1.10.0/jquery-ui.js"></script>
<script type="text/javascript">

    var gBaseUrl = "/";

    jQuery(function () {
        Grid.init();
    });

    var Grid = {
        _products: [],
        _colors: [
            { color: "#f00", name: "Red", code: 0 },
            { color: "#0f0", name: "Green", code: 1 },
            { color: "#00f", name: "Blue", code: 2 },
        ],

        init: function () {
            //this._initContextMenu();
            this._initProductActions();

        },

        onContextMenuClicked: function (e, menuIndex) {
            console.log("Clicked on context menu: " + menuIndex);
            //$(e.target).closest("tr").attr("style", "background: red;");
            var productId = this.getClickedProductId(e, "tr", "ListItem_");
            console.log("  product ID: " + productId);

            var color = this._resolveMenuItemColor(menuIndex);
            if (color !== null) {
                console.log("  color to set: " + color.name + " (" + color.color + ")");
                var product = this._getProductInGrid(productId);
                console.log("  current product color: " + (product == null || product.color == null ? "NOT SET" : product.color.color));
                if (product == null) {
                    product = {
                        id: productId,
                        color: color
                    };
                    this._products[this._products.length] = product;
                } else if (color.color === product.color.color) {
                    this.clearProductColor(productId);
                }

                $("#ListItem_" + productId).attr("style", "background-color: " + product.color.color);
            } else {
                console.log("  Bad color!");
            }
        },

        clearProductColor: function (productId) {
            console.log("Clearing color of product #" + productId);
            console.log("  current style: " + $("#ListItem_" + productId).attr("style"));
            $("#ListItem_" + productId).attr("style", "background-color: #000");
            console.log("  remove BG style: " + $("#ListItem_" + productId).attr("style"));
        },

        getClickedProductId: function (e, closestSelector, idPrefix) {
            var s = $(e.target).closest(closestSelector).attr("id");
            if (s !== undefined) {
                var id = parseInt(s.replace(idPrefix, ""));
                return isNaN(id) ? -2 : id;
            }
            return -1;
        },

        changeProductQuantityBy: function(productId, dQnt) {
            console.log("Going to change quantity of product ID: " + productId + " by " + dQnt);
            if (productId < 1 || dQnt == 0) {
                return;
            }

            var qntDiv = $("#Qnt_" + productId);
            var currentQnt = parseInt(qntDiv.html());
            //qntDiv.html("<img src='/images/loader.gif' width='16' height='16' alt='Loading...' />");

            $.ajax({
                url: gBaseUrl + "pradmin/changequantity/" + productId,
                data: { dQnt: dQnt },
                success: function (data, status, xhr) {
                    console.log("  current quantity of product is: " + qntDiv.html());
                    if (isNaN(currentQnt) === false) {
                        qntDiv.html(currentQnt + dQnt).css({ "color": "green" });
                    }
                },
                error: function (status, xhr) {
                    console.log("Error changing product quantity! ID: " + productId);
                }
            });
        },

        reportError: function (msg) {
            alert(msg);
        },

        addNewSizeQuantity: function (objToUpdate, productId, sizeName) {
            if (productId < 1) {
                this.reportError("Error determing ID of product (contact administrator)");
                return;
            }
            if (sizeName == "") {
                this.reportError("Error determing size (contact administrator)");
                return;
            }

            console.log("Adding new product for size: " + sizeName);
            var self = this;
            //var qntDiv = $("#NewS_" + productId);

            $.ajax({
                url: gBaseUrl + "pradmin/donewsize/" + productId,
                type: "POST",
                data: { sname: sizeName },
                success: function (data, status, xhr) {
                    console.log("  Added new product for size: " + sizeName);
                    console.log(data);
                    if (data.Status) {
                        console.log("    Got OK for new size");
                        objToUpdate
                            .unbind("click")
                            .html(data.HtmlData)
                            .css({ "color": "green" });
                        // Bind increase/decrese events for new size
                        $(".product-qnt-plus", objToUpdate).click(function (e) {
                            var id = self.getClickedProductId(e, "td", "Pr_");
                            self.changeProductQuantityBy(id, 1);
                        });
                        $(".product-qnt-minus", objToUpdate).click(function (e) {
                            var id = self.getClickedProductId(e, "td", "Pr_");
                            self.changeProductQuantityBy(id, -1);
                        });

                        objToUpdate.parent().attr("id", "Pr_" + data.NewSizeId);
                    } else {
                        self.reportError("Server error, adding new size");
                    }
                },
                error: function (status, xhr) {
                    console.log("Error adding product to size: " + sizeName);
                    self.reportError("Internal server error (500) adding new size");
                }
            });
        },

        _initContextMenu: function () {
            var self = this;
            var items = [];
            for (var i = 0; i < this._colors.length; i++) {
                items[items.length] = {
                    _index: i,
                    label: this._colors[i].name,
                    icon: this._colors[i].code,
                    action: function (e) {
                        self.onContextMenuClicked(e, this._index);
                    }
                };
            }
            $("#grid").contextPopup({
                title: "My menu",
                items: items,
            });
        },

        _initProductActions: function () {
            var self = this;
            $(".product-qnt-plus").click(function (e) {
                var id = self.getClickedProductId(e, "td", "Pr_");
                self.changeProductQuantityBy(id, 1);
            });
            $(".product-qnt-minus").click(function (e) {
                var id = self.getClickedProductId(e, "td", "Pr_");
                self.changeProductQuantityBy(id, -1);
            });

            // Creation of size name
            $(".product-new-size").click(function (e) {
                console.log($(e.target));
                var sizeName = $(e.target).attr("data-size-name");
                var productId = $(e.target).attr("data-product-id");
                if (confirm("Do you want to add product for size: " + sizeName + "?")) {
                    //var productId = self.getClickedProductId(e, "td", "NewS_");
                    self.addNewSizeQuantity($(e.target), productId, sizeName);
                }
            });

            $(".product-add-new").click(function (e) {
                e.preventDefault();
                console.log($(e.target));
                var oLink = $(e.target).parent();
                var categoryId = oLink.attr("data-category-id");
                var totalSize = oLink.attr("data-size-qnt");
                console.log("Category to add new product is: " + categoryId);
                console.log("  there are total sizes: " + totalSize);
                if (confirm("Do you want to add new product?")) {
                    self.addNewProduct(categoryId, totalSize);
                }
            });
        },

        addNewProduct: function (categoryId, totalSize) {
            $("#LoaderDiv").show();
            $("#DynamicDiv").html("");
            
            $.ajax({
                url: gBaseUrl + "pradmin/getnewproduct/@Model.PosId",
                data: "categoryId=" + categoryId + "&sizes=" + totalSize,
                success: function (data) {
                    $("#LoaderDiv").hide();
                    $("#DynamicDiv").html(data);
                },
                error: function (status) {
                    $("#LoaderDiv").hide();
                    alert("Error displaying new product form: " + status);
                },
            });
            $("#DialogDiv").dialog({
                resizable: false,
                height: 450,
                width: 500,
                modal: true,
                buttons: {
                    "Create": function () {
                        var productName = $("#ProductName").val();
                        if (productName.length < 3) {
                            alert("Product name should be at least 3");
                            return;
                        }
                        var oDialog = this;
                        $.ajax({
                            url: gBaseUrl + "pradmin/donewproduct/@Model.PosId",
                            data: $("#NewProductForm").serialize(),
                            type: "POST",
                            success: function (data) {
                                $("#ProCat_" + categoryId).append(data);
                                $(oDialog).dialog("close");
                            },
                            error: function (status) {
                                alert("Error creating new product: " + productName);
                            }
                        });
                    },
                    Cancel: function () {
                        $(this).dialog("close");
                    }
                }
            });
        },

        _resolveMenuItemColor: function (menuIndex) {
            for (var i = 0; i < this._colors.length; i++) {
                if (this._colors[i].code === menuIndex) {
                    return this._colors[i];
                }
            }
            return null;
        },

        _getProductInGrid: function (productId) {
            for(var i = 0; i < this._products.length; i++) {
                if (this._products[i].id == productId) {
                    return this._products[i];
                }
            }
            return null;
        }
    };
</script>

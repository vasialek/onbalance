@model OnBalance.ViewModels.Products.ProductsByCategoryViewModel

@{
    ViewBag.Title = "Balance";
}
    <style>
        .product-qnt {
            width: 25px; float: left; overflow: hidden; font-size: x-small;
        }
        .product-qnt-minus {
            width: 8px; float: left; cursor: pointer;
        }
        .product-qnt-plus {
            width: 8px; float: left; cursor: pointer;
        }
        thead {
            background: #efefef;
        }

        .table-bordered th {
            border-left: 0 !important;
        }

        .container {
            width: 90%;
            margin: auto;
        }

        .fixed {
            top: 0;
            position: fixed;
            /*width: auto;*/
            display: none;
            border: none;
        }

    </style>

<h2>Balance</h2>

@Html.ActionLink("Pending changes", "list", "balance", new { id = Model.PosId }, new { @class = "btn btn-mini btn-primary", target = "_blank" })

@foreach (var c in Model.ProductsByCategories)
{
    <table class="table table-bordered table-condensed table-striped">
        <thead>
            <tr id="ProSiz_@(c.CategoryId)">
                <th class="ob-str" width="83">
                    <div>Name
                        <a href="#" class="ob-add-size btn btn-mini" data-category-id="@c.CategoryId"><i class="icon icon-plus"></i> Size</a>
                    </div>
                </th>
                <th class="ob-str" width="110">
                    Code
                </th>
                <th class="ob-str" width="60">
                    Quantity
                </th>
                <th class="ob-str">
                    Price
                </th>
                <th class="ob-str">
                    Price<br />(release)
                </th>
                @* @foreach (var s in c.SizesOrdered) *@
                @for (int i = 0; i < c.SizesOrdered.Length; i++)
                {
                    <th id="@string.Concat("Siz_", c.CategoryId, "_", i)" data-size-name="@c.SizesOrdered[i].SizeName">@c.SizesOrdered[i].SizeName</th>
                }
            </tr>
        </thead>
        <tbody id="ProCat_@(c.CategoryId)">
            <tr>
                <td colspan="@(c.SizesOrdered.Count() + 5)">
                    <a href="#" class="btn btn-mini btn-primary product-add-new" data-category-id="@c.CategoryId" data-size-qnt="@c.SizesOrdered.Length"><i class="icon-plus"></i> @c.CategoryName</a>
                </td>
            </tr>
        @foreach (var item in c.Products)
	    {
            <tr data-product-id="@item.Id">
                <td class="ob-str">
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td class="ob-str">
                    @Html.DisplayFor(modelItem => item.InternalCode)
                </td>
                <td class="ob-str">
                    @Html.DisplayFor(modelItem => item.QuantityCalculated)
                </td>
                <td class="ob-str">
                    @Html.DisplayFor(modelItem => item.PriceFirst)
                </td>
                <td class="ob-str">
                    @Html.DisplayFor(modelItem => item.PriceReleaseFirst)
                </td>
                @*@foreach (var s in c.SizesOrdered)*@
                @for (int i = 0; i < c.SizesOrdered.Length; i++)
                {
                    if (item.ProductDetails != null)
                    {
                        var qnt = item.ProductDetails.FirstOrDefault(x => x.parameter_value == c.SizesOrdered[i].SizeName);
                        if (qnt != null)
                        {
                            var pd = String.IsNullOrEmpty(qnt.DataJson) ? null : Newtonsoft.Json.JsonConvert.DeserializeObject<OnBalance.Models.ProductDecoratorColor>(qnt.DataJson);
                        <td id="@("Pr_" + qnt.id)" @Html.Raw(pd == null || String.IsNullOrEmpty(pd.BackgroundColor) ? "" : String.Format("style='background-color: {0};'", pd.BackgroundColor))>
                            <div id="@("Qnt_" + qnt.id)" class="product-qnt">@qnt.quantity</div>
                            <div id="@("Decrease_" + qnt.id)" class="product-qnt-minus">@Html.Image("/images/decrease.gif", 6, 3, "-", null)</div>
                            <div id="@("Increase_" + qnt.id)" class="product-qnt-plus">@Html.Image("/images/increase.gif", 6, 3, "+", null)</div>
                        </td>
                        }
                        else
                        {
                            <td id="@string.Concat("NewS_", item.Id, "_", i)">
                                <div data-product-id="@item.Id" data-size-name="@c.SizesOrdered[i].SizeName" class="product-new-size" style="font-size: x-small">Add</div>
                            </td>
                        }
                    }
                    else
                    {
                        <td>-</td>
                    }
                }
            </tr>
            
	    }
        </tbody>
    </table>
}

<div id="DialogDiv" style="display: none;">
    @Html.LoaderDiv()
    <div id="DynamicDiv"></div>
</div>

<link rel="stylesheet" href="@Url.Content("~/css/jquery.contextmenu.css")">
<link rel="stylesheet" href="//code.jquery.com/ui/1.11.0/themes/smoothness/jquery-ui.css">
<script src="//code.jquery.com/jquery-1.10.2.js"></script>
<script src="@Url.Content("~/Scripts/jquery.contextmenu.js")"></script>
<script src="//code.jquery.com/ui/1.10.0/jquery-ui.js"></script>
<script src="@Url.Content("~/Scripts/grid.js")"></script>
<script type="text/javascript">

    var gBaseUrl = "/";

    ; (function ($) {
        $.fn.fixMe = function () {
            return this.each(function () {
                var $this = $(this),
                   $t_fixed;
                function init() {
                    $this.wrap('<div class="container" />');
                    $t_fixed = $this.clone();
                    $t_fixed.find("tbody").remove().end().addClass("fixed").insertBefore($this);
                    resizeFixed();
                }
                function resizeFixed() {
                    //$t_fixed.find("th").each(function (index) {
                    //    $(this).css("width", $this.find("th").eq(index).outerWidth() + "px");
                    //});
                }
                function scrollFixed() {
                    var offset = $(this).scrollTop(),
                    tableOffsetTop = $this.offset().top,
                    tableOffsetBottom = tableOffsetTop + $this.height() - $this.find("thead").height();
                    if (offset < tableOffsetTop || offset > tableOffsetBottom)
                        $t_fixed.hide();
                    else if (offset >= tableOffsetTop && offset <= tableOffsetBottom && $t_fixed.is(":hidden"))
                        $t_fixed.show();
                }
                $(window).resize(resizeFixed);
                $(window).scroll(scrollFixed);
                init();
            });
        };
    })(jQuery);

    jQuery(function () {
        Grid.init(@Model.PosId);
        $("table").fixMe();
    });


</script>
<script type="text/javascript">
    @Html.Raw(Model.GetDecoratorsAsJs("gDecorators"))
</script>
